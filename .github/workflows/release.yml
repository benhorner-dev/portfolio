name: Release
on:
  push:
    branches:
      - main
      - feature/port-43-setup-neon-database
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
concurrency:
  group: ${{ github.ref_name }}-deploy
  cancel-in-progress: false # Wait for running deployments first prior to starting a new one
permissions:
  id-token: write
  contents: write
  issues: write
  pull-requests: write
jobs:
  # prebuild:
  #   name: Prebuild setup and semantic release
  #   runs-on: ubuntu-latest
  #   outputs:
  #     released: ${{ steps.tag.outputs.released }}
  #     version: ${{ steps.tag.outputs.version }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Tag semantic release
  #       id: tag
  #       uses: ./.github/actions/tag

  create-staging-db:
    name: Create staging database branch
    uses: ./.github/workflows/neon-create-branch.yml
    # needs: [prebuild]
    with:
      branch_name: "staging"
    secrets: inherit

  deploy-frontend-staging:
    needs: [create-staging-db]
    name: Deploy frontend to staging
    runs-on: ubuntu-latest
    outputs:
      staging_url: ${{ steps.deploy-staging.outputs.staging_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install Vercel CLI
        run: bun i -g vercel
      - name: Deploy to Vercel staging with staging database
        id: deploy-staging
        run: |
          # Deploy to staging with the staging database URL
          STAGING_URL=$(vercel deploy \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --env DATABASE_URL='${{ needs.create-staging-db.outputs.db_url_with_pooler }}' \
            --yes)
          echo "staging_url=${STAGING_URL}" >> $GITHUB_OUTPUT
          echo "✅ Frontend deployed to staging: ${STAGING_URL}"
          echo "✅ Using staging database branch"

  smoke-tests:
    name: Run smoke tests
    runs-on: ubuntu-latest
    environment: staging
    needs: [deploy-frontend-staging, create-staging-db]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Run smoke tests
        env:
          PLAYWRIGHT_VERCEL_TOKEN: ${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}
          PLAYWRIGHT_BASE_URL: ${{ needs.deploy-frontend-staging.outputs.staging_url }}
          DATABASE_URL: ${{ needs.create-staging-db.outputs.db_url_with_pooler }}
        run: |
          bun install
          bunx playwright install --with-deps
          echo "Running smoke tests against:"
          echo "Frontend URL: ${{ needs.deploy-frontend-staging.outputs.staging_url }}"
          echo "Database: staging branch"
          cd apps/frontend
          bunx playwright test tests/smoke.spec.ts
          echo "✅ Smoke tests passed"

  # delete-staging-db:
  #   name: Delete staging database branch
  #   uses: ./.github/workflows/neon-delete-branch.yml
  #   needs: [smoke-tests]
  #   if: always() # Always clean up, even if tests fail
  #   with:
  #     branch_name: "staging"
  #   secrets: inherit

  # migrate:
  #   needs: [smoke-tests]
  #   name: Run database migrations on production
  #   runs-on: ubuntu-latest
  #   env:
  #     DATABASE_URL: ${{ secrets.DATABASE_URL }} # Production database
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Setup Bun
  #       uses: oven-sh/setup-bun@v2
  #       with:
  #         bun-version: latest
  #     - name: Run migrations on production database
  #       run: |
  #         echo "Running migrations on production database"
  #         bun install
  #         bunx turbo migrate
  #         echo "✅ Production database migrations completed"

  # deploy-frontend-production:
  #   name: Deploy frontend to production
  #   runs-on: ubuntu-latest
  #   needs: [migrate]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Setup Bun
  #       uses: oven-sh/setup-bun@v2
  #       with:
  #         bun-version: latest
  #     - name: Install Vercel CLI
  #       run: bun i -g vercel
  #     - name: Deploy to Vercel production
  #       run: |
  #         # Production deployment uses environment variables from Vercel dashboard
  #         # No --env flags means it uses the DATABASE_URL set in Vercel's environment
  #         PRODUCTION_URL=$(vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --yes)
  #         echo "✅ Frontend deployed to production: ${PRODUCTION_URL}"
  #         echo "✅ Using production database (from Vercel environment variables)"
