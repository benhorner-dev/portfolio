import { OracleValues } from "@/lib/explore/constants";
import type {
	AgentAction,
	ExecutionStep,
	FinalAnswerArgs,
} from "@/lib/explore/types";
import { getLogger } from "@/lib/logger";

const logger = getLogger();

export const defaultAnswerFormatter = (result: any): string => {
	logger.info(
		"formatFinalAnswer called with intermediate_steps:",
		result.intermediateSteps?.length,
	);

	const errorMessage =
		"## Error\n\nNo final answer was generated. Please try again.\n\n---\n*Generated by Nexties*";

	if (!result.intermediateSteps || result.intermediateSteps.length === 0) {
		logger.info("No intermediate steps found, returning error message");
		return errorMessage;
	}

	const finalAnswerStep = result.intermediateSteps.find(
		(step: ExecutionStep) => {
			return step.actions.some(
				(action) => action.tool === OracleValues.FINAL_ANSWER,
			);
		},
	);

	if (!finalAnswerStep) {
		return errorMessage;
	}

	const { actions, results } = finalAnswerStep;

	// Find the final_answer action and its corresponding result
	const finalAnswerIndex = actions.findIndex(
		(action: AgentAction) => action.tool === OracleValues.FINAL_ANSWER,
	);

	if (finalAnswerIndex === -1) {
		return errorMessage;
	}

	const action = actions[finalAnswerIndex];
	const output = results[finalAnswerIndex];

	if (!output || output.trim() === "") {
		logger.warn("no output in final answer: Using tool input as fallback");
		const toolInput = action.toolInput as FinalAnswerArgs;
		return injectTextIntoFinalAnswer(toolInput.answer, toolInput.researchSteps);
	}

	try {
		const parsedOutput = JSON.parse(output);
		return injectTextIntoFinalAnswer(
			parsedOutput.answer,
			parsedOutput.researchSteps,
		);
	} catch (error) {
		logger.error(
			"JSON parse failed in final answer. Using tool input as fallback",
		);
		const toolInput = action.toolInput as FinalAnswerArgs;
		return injectTextIntoFinalAnswer(toolInput.answer, toolInput.researchSteps);
	}
};

const injectTextIntoFinalAnswer = (
	answer: string,
	researchSteps: string,
): string => {
	return `## Answer
${answer}
## Thoughts
${researchSteps}
---
*Generated by Nexties*`;
};
